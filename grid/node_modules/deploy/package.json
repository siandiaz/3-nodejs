{
  "name": "deploy",
  "version": "1.0.3",
  "description": "tools to create setup a server for continous deployment via git push.",
  "homepage": "http://github.com/dominictarr/deploy",
  "repository": {
    "type": "git",
    "url": "https://github.com/dominictarr/deploy.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://bit.ly/dominictarr"
  },
  "bin": {
    "deploy": "deploy"
  },
  "scripts": {
    "test": "meta-test test/*.js"
  },
  "readme": "# deploy\n\ntools to create setup a server for continous deployment via git push.\n\n## basics\n\n``` js\nssh user@host\nnpm install -g deploy\ndeploy init simple /path/to/repo\n\n#(use absolute paths throughout)\nexit\ngit remote add deploy ssh://user@host/path/to/repo\n\n#push it real good\ngit push deploy master\n```\nAdd an executable script named `update` to the root of your project.\nIt will be executed when you push your repo!\n\n## deploy create simple|branches USER@HOST path\n\n> okay, so I also added this thing to push to multiple branches.\n> this is too complicated really, I will delete this feature...\n\ncreate a git repo on HOST at path\n\nand add a remote named `deploy` in the currect git repo.\n\nremote repos can be 'simple' or use 'branches'.\n\n> currently I recommend using `simple`\n\nwhen you push to a git repo it will checkout master into ./\nthen run `./update`\n\nif you use `deploy create branches ...` it will checkout \neach branch and tag into a seperate folder, and then run `./update`\n_this will be very useful for split testing!_\n\n```\n  project/\n    git/        #git stuff in here\n    master/     #master \n    tag/        #tag\n```\n\npush to your new git repo with \n\n```\ngit push deploy [branch|--tags]\n\n",
  "readmeFilename": "readme.markdown",
  "_id": "deploy@1.0.3",
  "_from": "deploy@"
}
